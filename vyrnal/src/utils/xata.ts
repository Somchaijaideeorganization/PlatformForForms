// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";

const tables = [
  {
    name: "Forms",
    columns: [
      { name: "data", type: "json", notNull: true, defaultValue: "{}" },
      {
        name: "author",
        type: "text",
        notNull: true,
        defaultValue: "Unknown User",
      },
    ],
  },
  {
    name: "Users",
    columns: [
      {
        name: "author",
        type: "text",
        notNull: true,
        defaultValue: "Unknown User",
      },
      {
        name: "sub",
        type: "text",
        notNull: true,
        defaultValue: "000000000000000000000",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type Forms = InferredTypes["Forms"];
export type FormsRecord = Forms & XataRecord;

export type Users = InferredTypes["Users"];
export type UsersRecord = Users & XataRecord;

export type DatabaseSchema = {
  Forms: FormsRecord;
  Users: UsersRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://TaarnN-s-workspace-7vup51.us-east-1.xata.sh/db/VyrnalDB",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient();
  return instance;
};
