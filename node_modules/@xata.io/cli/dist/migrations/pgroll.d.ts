import { Schemas, XataApiClient } from '@xata.io/client';
import { Column } from '@xata.io/codegen';
import z from 'zod';
import { XataClient } from '../base.js';
import { MigrationFilePgroll } from './schema.js';
import { OpRawSQL, OpRenameConstraint, PgRollOperation } from '@xata.io/pgroll';
import { BranchSchemaFormatted } from '../commands/schema/edit.js';
export declare const isBranchPgRollEnabled: (details: Schemas.DBBranch) => boolean;
export declare const isMigrationPgRollFormat: (migration: Schemas.MigrationObject | Schemas.MigrationHistoryItem | MigrationFilePgroll) => migration is Schemas.MigrationHistoryItem;
export declare const hydrateMigrationObject: (migration: Schemas.MigrationHistoryItem) => MigrationFilePgroll;
export declare function allMigrationsPgRollFormat(): Promise<boolean>;
export declare const xataStringColumns: readonly ["email", "text", "string"];
declare const XataStringColumn: z.ZodObject<{
    "xata.type": z.ZodEnum<["email", "text", "string"]>;
}, "strip", z.ZodTypeAny, {
    "xata.type": "string" | "text" | "email";
}, {
    "xata.type": "string" | "text" | "email";
}>;
export type XataStringColumnType = z.infer<typeof XataStringColumn>;
export declare function getBranchDetailsWithPgRoll(xata: XataClient, { workspace, region, database, branch }: {
    workspace: string;
    region: string;
    database: string;
    branch: string;
}): Promise<Schemas.DBBranch>;
export declare const isColumnTypeUnsupported: (type: string) => boolean;
export declare function xataColumnTypeToPgRoll(type: Column['type']): string;
export declare const exhaustiveCheck: (x: never) => never;
export declare const generateLinkReference: ({ column, table, onDelete: on_delete }: {
    column: string;
    table: string;
    onDelete?: string;
}) => {
    name: string;
    table: string;
    column: string;
    on_delete: string;
};
export declare const xataColumnTypeToPgRollConstraintName: (tableName: string, columnName: string, columnType: Column["type"]) => string;
export declare const xataColumnTypeToPgRollConstraint: (column: Column, table: string) => {
    name: string;
    constraint: string;
} | undefined;
export declare const xataColumnTypeToPgRollComment: (column: Column) => string | undefined;
export declare const requiresUpArgument: (notNull: Column["notNull"], defaultValue: unknown) => boolean | undefined;
export declare function xataColumnTypeToZeroValue(type: Column['type'], defaultValue: unknown): string;
export declare function waitForMigrationToFinish(api: XataApiClient, workspace: string, region: string, database: string, branch: string, jobId: string): Promise<void>;
export declare const updateConstraint: (branchDetails: BranchSchemaFormatted, operation: PgRollOperation) => {
    rename_constraint: OpRenameConstraint;
}[] | undefined;
export declare const updateLinkComment: (branchDetails: BranchSchemaFormatted, operation: PgRollOperation) => {
    sql: OpRawSQL;
}[] | undefined;
export declare const tableNameFromLinkComment: (comment: string) => string | null;
export {};
