export declare const fetchEmptyStatus: (url: string, request: any) => {
    ok: boolean;
    json: () => Promise<{
        workspaces: {
            id: string;
            name: string;
        }[];
    }>;
} | {
    ok: boolean;
    json: () => Promise<{
        databases: {
            name: string;
            region: string;
        }[];
    }>;
} | {
    ok: boolean;
    json: () => Promise<{
        usePgRoll: boolean;
        schema: {
            tables: {
                name: string;
                columns: {
                    name: string;
                    type: string;
                }[];
            }[];
        };
    }>;
} | {
    ok: boolean;
    json: () => Promise<{
        schema: {
            name: string;
            tables: {
                table1: {
                    oid: string;
                    name: string;
                    comment: string;
                    columns: {
                        a: {
                            name: string;
                            type: string;
                            default: null;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                        xata_createdat: {
                            name: string;
                            type: string;
                            default: string;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                        xata_id: {
                            name: string;
                            type: string;
                            default: null;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                        xata_updatedat: {
                            name: string;
                            type: string;
                            default: string;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                        xata_version: {
                            name: string;
                            type: string;
                            default: string;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                    };
                    indexes: {};
                    primaryKey: string[];
                    foreignKeys: null;
                    checkConstraints: null;
                    uniqueConstraints: null;
                };
            };
        };
    }>;
} | {
    ok: boolean;
    status: number;
    json: () => Promise<null>;
};
export declare const fetchRunningMigrationWithSuccessfulRollback: (url: string, request: any) => {
    ok: boolean;
    json: () => Promise<{
        workspaces: {
            id: string;
            name: string;
        }[];
    }>;
} | {
    ok: boolean;
    json: () => Promise<{
        databases: {
            name: string;
            region: string;
        }[];
    }>;
} | {
    ok: boolean;
    json: () => Promise<{
        usePgRoll: boolean;
        schema: {
            tables: {
                name: string;
                columns: {
                    name: string;
                    type: string;
                }[];
            }[];
        };
    }>;
} | {
    ok: boolean;
    json: () => Promise<{
        schema: {
            name: string;
            tables: {
                table1: {
                    oid: string;
                    name: string;
                    comment: string;
                    columns: {
                        a: {
                            name: string;
                            type: string;
                            default: null;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                        xata_createdat: {
                            name: string;
                            type: string;
                            default: string;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                        xata_id: {
                            name: string;
                            type: string;
                            default: null;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                        xata_updatedat: {
                            name: string;
                            type: string;
                            default: string;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                        xata_version: {
                            name: string;
                            type: string;
                            default: string;
                            nullable: boolean;
                            unique: boolean;
                            comment: string;
                        };
                    };
                    indexes: {};
                    primaryKey: string[];
                    foreignKeys: null;
                    checkConstraints: null;
                    uniqueConstraints: null;
                };
            };
        };
    }>;
} | {
    ok: boolean;
    json: () => Promise<{
        jobID: string;
    }>;
};
