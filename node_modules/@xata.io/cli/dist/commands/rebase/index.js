var _a;
import { Args } from '@oclif/core';
import { BaseCommand } from '../../base.js';
import { commitToMigrationFile, getLastCommonIndex, getLocalMigrationFiles, removeLocalMigrations, writeLocalMigrationFiles } from '../../migrations/files.js';
import { getBranchDetailsWithPgRoll, isBranchPgRollEnabled } from '../../migrations/pgroll.js';
class Rebase extends BaseCommand {
    async run() {
        const { args, flags } = await this.parse(_a);
        const xata = await this.getXataClient();
        const { workspace, region, database, branch } = await this.getParsedDatabaseURLWithBranch(flags.db, args.branch, true);
        this.info(`Rebase command is experimental, use with caution`);
        const details = await getBranchDetailsWithPgRoll(xata, { workspace, region, database, branch });
        if (isBranchPgRollEnabled(details)) {
            let logs = [];
            let cursor = undefined;
            do {
                const { migrations, cursor: newCursor } = await xata.api.migrations.getMigrationHistory({
                    pathParams: { workspace, region, dbBranchName: `${database}:${branch}` },
                    queryParams: { cursor, limit: 200 }
                });
                logs = logs.concat(migrations);
                cursor = newCursor;
            } while (cursor !== undefined);
            const remoteMigrationFiles = commitToMigrationFile(logs);
            const localMigrationFiles = await getLocalMigrationFiles(isBranchPgRollEnabled(details));
            const lastCommonMigrationIndex = getLastCommonIndex(localMigrationFiles, remoteMigrationFiles);
            const migrationsToRebase = localMigrationFiles.slice(lastCommonMigrationIndex);
            const newMigrationFiles = [...remoteMigrationFiles, ...migrationsToRebase];
            await removeLocalMigrations();
            await writeLocalMigrationFiles(newMigrationFiles);
        }
        else {
            const { logs } = await xata.api.migrations.getBranchSchemaHistory({
                pathParams: { workspace, region, dbBranchName: `${database}:${branch}` },
                body: {
                    // TODO: Fix pagination in the API to start from last known migration and not from the beginning
                    // Also paginate until we get all migrations
                    page: { size: 200 }
                }
            });
            const remoteMigrationFiles = commitToMigrationFile(logs);
            const localMigrationFiles = await getLocalMigrationFiles();
            const lastCommonMigrationIndex = getLastCommonIndex(localMigrationFiles, remoteMigrationFiles);
            const migrationsToRebase = localMigrationFiles.slice(lastCommonMigrationIndex);
            const newMigrationFiles = [...remoteMigrationFiles, ...migrationsToRebase];
            // TODO: Check if there are any conflicts
            await removeLocalMigrations();
            await writeLocalMigrationFiles(newMigrationFiles);
        }
    }
}
_a = Rebase;
Rebase.description = 'Reapply local migrations on top of a remote branch';
Rebase.examples = [];
Rebase.flags = {
    ..._a.commonFlags,
    ..._a.databaseURLFlag
};
Rebase.args = {
    branch: Args.string({ description: 'The branch to take migrations from', required: true })
};
Rebase.hidden = true;
export default Rebase;
