import { BaseCommand } from '../../base.js';
import { Schemas } from '@xata.io/client';
import { OpAddColumn, OpAlterColumn, OpCreateTable, OpDropColumn, OpDropConstraint, OpDropTable, OpRenameTable, PgRollMigration } from '@xata.io/pgroll';
export default class EditSchema extends BaseCommand<typeof EditSchema> {
    static description: string;
    static examples: never[];
    static flags: {
        branch: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
        source: import("@oclif/core/lib/interfaces/parser.js").BooleanFlag<boolean>;
        db: import("@oclif/core/lib/interfaces/parser.js").OptionFlag<string | undefined, import("@oclif/core/lib/interfaces/parser.js").CustomOptions>;
    };
    static args: {};
    branchDetails: BranchSchemaFormatted;
    workspace: string;
    region: string;
    database: string;
    branch: string;
    tableAdditions: AddTablePayload['table'][];
    tableEdits: EditTablePayload['table'][];
    tableDeletions: DeleteTablePayload[];
    columnEdits: ColumnEdits;
    columnAdditions: ColumnAdditions;
    columnDeletions: DeleteColumnPayload;
    currentMigration: PgRollMigration;
    activeIndex: number;
    showSchemaEdit(): Promise<void>;
    migrate(): Promise<void>;
    getColumnNameEdit({ column }: {
        column: EditColumnPayload['column'];
    }): string;
    getColumnNullable({ column }: {
        column: EditColumnPayload['column'];
    }): boolean;
    getColumnUnique({ column }: {
        column: EditColumnPayload['column'];
    }): boolean;
    renderColumnMessage({ column }: {
        column: EditColumnPayload['column'];
    }): string;
    renderTableNameEdited(tableName: string): string | undefined;
    renderTableMessage(originalName: string, newTable?: boolean): string;
    run(): Promise<void>;
    clear(): void;
    footer(): string;
    toggleTableDelete({ initialTableName }: {
        initialTableName: string;
    }): Promise<void>;
    toggleColumnDelete({ column }: {
        column: EditColumnPayload['column'];
    }): Promise<void>;
    showColumnEdit(column: EditColumnPayload['column']): Promise<void>;
    showAddColumn({ tableName, column }: {
        tableName: AddColumnPayload['tableName'];
        column: AddColumnPayload['column'];
    }): Promise<void>;
    showAddTable({ name }: {
        name: AddTablePayload['table']['name'];
    }): Promise<void>;
    showTableEdit({ initialTableName }: {
        initialTableName: string;
    }): Promise<void>;
    validateTableName: (value: string, state: ValidationState) => boolean | "Name cannot be undefined" | "Name cannot be empty";
    validateColumnName: (value: string) => true | "Name cannot be undefined" | "Name cannot be empty";
    validateColumnNullable: (value: string) => true | "Invalid value. Nullable field must be a boolean";
    validateColumnUnique: (value: string) => true | "Invalid value. Unique field must be a boolean";
}
export declare const editsToMigrations: (command: EditSchema) => ({
    drop_column: OpDropColumn;
} | {
    drop_table: OpDropTable;
} | {
    create_table: OpCreateTable;
} | {
    add_column: OpAddColumn;
} | {
    alter_column: OpAlterColumn;
} | {
    drop_constraint: OpDropConstraint;
} | {
    rename_table: OpRenameTable;
})[];
export type BranchSchemaFormatted = {
    schema: {
        tables: {
            name: string;
            uniqueConstraints: Schemas.BranchSchema['tables'][number]['uniqueConstraints'];
            checkConstraints: Schemas.BranchSchema['tables'][number]['checkConstraints'];
            foreignKeys: Schemas.BranchSchema['tables'][number]['foreignKeys'];
            columns: {
                name: string;
                type: string;
                unique: boolean;
                notNull: boolean;
                defaultValue: any;
                comment: string;
            }[];
        }[];
    };
} | undefined;
export type ColumnData = {
    name: string;
    type: string;
    unique: boolean;
    nullable: boolean;
    defaultValue?: string;
    vector?: {
        dimension: number;
    };
    originalName: string;
    tableName: string;
    link?: {
        table: string;
    };
    file?: {
        defaultPublicAccess: boolean;
    };
    'file[]'?: {
        defaultPublicAccess: boolean;
    };
};
export type AddTablePayload = {
    type: 'add-table';
    table: {
        name: string;
    };
};
export type EditTablePayload = {
    type: 'edit-table';
    table: {
        name: string;
        newName: string;
    };
};
export type DeleteTablePayload = {
    name: string;
};
export type AddColumnPayload = {
    type: 'add-column';
    tableName: string;
    column: ColumnData;
};
export type EditColumnPayload = {
    type: 'edit-column';
    column: ColumnData;
};
export type DeleteColumnPayload = {
    [tableName: string]: string[];
};
export type FormatPayload = {
    type: 'space' | 'migrate' | 'schema';
};
export type SelectChoice = {
    name: FormatPayload | AddTablePayload | EditTablePayload | AddColumnPayload | EditColumnPayload;
    message: string;
    role?: string;
    choices?: SelectChoice[];
    disabled?: boolean;
    hint?: string;
};
export type ValidationState = {
    values: {
        name: string;
    };
    items: {
        name: string;
        input: string;
    }[];
    fields: {
        name: string;
        initial: string;
    }[];
};
export type ColumnAdditions = {
    [tableName: string]: {
        [columnName: string]: AddColumnPayload['column'];
    };
};
export type ColumnEdits = {
    [tableName: string]: {
        [columnName: string]: AddColumnPayload['column'];
    };
};
